import networkx as nx
import matplotlib.pyplot as plt

class Graf:
    def __init__(self):
        """Metode untuk membuat objek graf."""
        self.graph = nx.Graph()

    def add_node(self, node):
        """Metode untuk menambah node (titik) ke graf.
        Args:
            node (str/int): Nama atau label node.
        """
        self.graph.add_node(node)

    def add_edge(self, node1, node2, weight=None):
        """Metode untuk menambah sisi (edge) ke graf.
        Args:
            node1 (str/int): Node pertama.
            node2 (str/int): Node kedua.
            weight (float, optional): Bobot sisi (jika ada).
        """
        self.graph.add_edge(node1, node2, weight=weight)

    def visualize_graph(self):
        """Metode untuk menampilkan visualisasi graf."""
        pos = nx.spring_layout(self.graph)
        nx.draw(self.graph, pos, with_labels=True, node_color='lightblue', edge_color='gray', node_size=2000, font_size=10)
        labels = nx.get_edge_attributes(self.graph, 'weight')
        nx.draw_networkx_edge_labels(self.graph, pos, edge_labels=labels)
        plt.show()

    def visual_shortest_path(self, start, end):
        """Visualisasi jalur terpendek antara dua simpul."""
        path = self.shortest_path(start, end)
        if path and isinstance(path, list):
            edge_path = [(path[i], path[i+1]) for i in range(len(path)-1)]
            pos = nx.spring_layout(self.graph)
            labels = nx.get_edge_attributes(self.graph, 'weight')
            nx.draw(self.graph, pos, with_labels=True, node_color='lightblue', node_size=500, font_size=10)
            nx.draw_networkx_edges(self.graph, pos, edgelist=edge_path, edge_color='red', width=2)
            nx.draw_networkx_edge_labels(self.graph, pos, edge_labels=labels)
            plt.title(f"Shortest Path from {start} to {end}")
            plt.show()

    def shortest_path(self, source, target):
        """Metode untuk menghitung jalur terpendek antara dua simpul.
        Args:
            source (str/int): Simpul awal.
            target (str/int): Simpul tujuan.
        Returns:
            list: Jalur terpendek dari source ke target.
        """
        try:
            return nx.shortest_path(self.graph, source=source, target=target, weight='weight')
        except nx.NetworkXNoPath:
            return f"No path between {source} and {target}."

    # 5 fungsi tambahan
    def degree_centrality(self):
        """Menghitung derajat sentralitas untuk setiap simpul.
        Returns:
            dict: Derajat sentralitas untuk setiap simpul.
        """
        return nx.degree_centrality(self.graph)
    
    def clustering_coefficient(self):
        """Menghitung koefisien klaster untuk setiap simpul.
        Returns:
            dict: Koefisien klaster untuk setiap simpul.
        """
        return nx.clustering(self.graph)

    def graph_diameter(self):
        """Menghitung diameter graf (jika terhubung).
        Returns:
            int: Diameter graf.
        """
        if self.is_connected():
            return nx.diameter(self.graph)
        else:
            return "Graph is not connected."

    def is_connected(self):
        """Memeriksa apakah graf terhubung.
        Returns:
            bool: True jika graf terhubung, False jika tidak.
        """
        return nx.is_connected(self.graph)

    def all_pairs_shortest_paths(self):
        """Menghitung jalur terpendek untuk semua pasangan simpul.
        Returns:
            dict: Jalur terpendek untuk setiap pasangan simpul.
        """
        return dict(nx.all_pairs_shortest_path(self.graph))

    def connected_components(self):
        """Mengidentifikasi komponen terhubung dalam graf.
        Returns:
            list: Daftar komponen terhubung.
        """
        return [list(component) for component in nx.connected_components(self.graph)]


# Contoh Penggunaan:
graph = Graf()

# Menambahkan simpul dan sisi
graph.add_node(1)
graph.add_node(2)
graph.add_node(3)
graph.add_node(4)
graph.add_node(5)

graph.add_edge(1, 2, weight=4.5)
graph.add_edge(1, 3, weight=3.2)
graph.add_edge(2, 4, weight=2.7)
graph.add_edge(3, 4, weight=1.8)
graph.add_edge(1, 4, weight=6.7)
graph.add_edge(3, 5, weight=2.7)

# Visualisasi graf
graph.visualize_graph()

# Jalur terpendek
shortest_path = graph.shortest_path(1, 5)
print("Shortest Path:", shortest_path)

# Visualisasi jalur terpendek
graph.visual_shortest_path(1, 5)

# Metode tambahan
print("Degree centrality:", graph.degree_centrality())
print("Clustering coefficient:", graph.clustering_coefficient())
print("Graph diameter:", graph.graph_diameter())
print("All pairs shortest paths:", graph.all_pairs_shortest_paths())
print("Connected components:", graph.connected_components())
